{"version": 3, "mappings": ";AACA,QAAA,aAAA;AACA,QAAA,WAAA;;;;;;;AAOAA,uBAAuB;AAGvB;;IACIC,SAASC,QAAAC,IAAA,CAAaC,GAAb,CAAAC;IAETC,OAAO,IAAAC,aAAA,CAAcN,MAAd,EAAsB,MAAtB;IAEP;QACIO,WAAWF,IAAAG,KAAA,QAAa,aAAb,CAAAC;IADf;QAIIC,UAAU,IAAAC,WAAA;QACVC,OAAOF,OAAAG,IAAA,CAAYV,GAAZ;QACPS,IAAAE,KAAAC,OAAA;QACAf,SAASY,IAAAE,KAAAE;QACTX,OAAO,IAAAC,aAAA,CAAcN,MAAd,EAAsB,MAAtB;QACPO,WAAWF,IAAAG,KAAA,QAAa,aAAb,CAAAC;mBACX,CAAMF,QAAN;IAVJ;IAWA,OAAOA;AAhBX;AAmBA;;IACIU,KAAK,IAAAC,SAAAC,QAAA;IACLF,EAAAG,KAAA,CAAQrB,oBAAR;IACAkB,EAAAI,YAAA,CAAe,OAAf;IACAJ,EAAA,CAAG,WAAH,IAAkBK;IAClBL,EAAAM,OAAA;IACA;QACIlB,OAAO,IAAAC,aAAA,CAAcW,EAAAO,SAAA,EAAAC,KAAA,EAAd,EAAoC,aAApC;QACPC,cAAcrB,IAAAsB,WAAA,CAAgB,sBAAhB,CAAAC;QACdF,cAAcG,EAAAC,IAAA,CAAO,GAAP,EAAY,EAAZ,EAAgBJ,WAAhB;QACdA,cAAcG,EAAAC,IAAA,CAAOC,GAAA,CAAI,EAAJ,CAAP,EAAgB,EAAhB,EAAoBL,WAApB;QACdA,cAAcG,EAAAC,IAAA,CAAOC,GAAA,CAAI,EAAJ,CAAP,EAAgB,EAAhB,EAAoBL,WAApB;QACdA,cAAcG,EAAAC,IAAA,CAAO,KAAP,EAAa,EAAb,EAAiBJ,WAAjB;QACdA,cAAcG,EAAAC,IAAA,CAAO,KAAP,EAAa,EAAb,EAAiBJ,WAAjB;mBACd,CAAMA,WAAN;IARJ;QAUIA,cAAc,EAAA,CAAC,CAAD;IAVlB;IAYA,OAAOA;AAlBX;AAmBAM,WAAW;AAEX,OAAM,IAAN;IACIC,IAAAC,MAAA,CAAW,CAAX;IACA;QACIC,KAAKC,GAAAC,OAAA,CAAWL,QAAX;QACLM,cAAc;QACd,mCAAaH,wBAAb,iBAAA,YAAA;;YACIG,WAAAA,EAAAA,EAAaC;QADjB;QAEAC,qBAAqBC,gBAAA,CAAiBC,YAAA,CAAaJ,WAAb,CAAjB;QAErBK,IAAIC,IAAA,CAAKZ,QAAL,EAAe,IAAf;QACJW,CAAAE,MAAA;IARJ;mBAUI,CAAM,KAAN;IAVJ;AAFJ", "sources": ["findEthicsScore.py"], "names": ["corporate_critic_url", "source", "requests", "requests.get", "url", "requests.get(url).text", "soup", "BeautifulSoup", "compName", "soup.find", "soup.find({\"id\": \"bylineInfo\"}).text", "session", "HTMLSession", "resp", "session.get", "resp.html", "resp.html.render", "resp.html.html", "br", "mechanize", "mechanize.Browser", "br.open", "br.select_form", "companyName", "br.submit", "br.response", "br.response().read", "ethicsScore", "soup.select_one", "soup.select_one(\".resultlistethiscore\").text", "re", "re.sub", "chr", "filename", "time", "time.sleep", "df", "csv", "csv.reader", "product_url", "entry", "final_ethics_score", "corporate_critic", "find_company", "f", "open", "f.close"], "sourcesContent": ["import mechanize\nfrom bs4 import BeautifulSoup\nfrom requests_html import HTMLSession\nimport re\nimport requests\nimport csv\nimport pandas as pd\nimport time\n\ncorporate_critic_url = \"http://www.corporatecritic.org/companies.aspx\"\n\n\ndef find_company(url):\n    source = requests.get(url).text\n\n    soup = BeautifulSoup(source, 'lxml')\n    # keyword bylineinfo\n    try:\n        compName = soup.find(id=\"bylineInfo\").text\n    except:\n        #print(\"exception code\")\n        session = HTMLSession()\n        resp = session.get(url)\n        resp.html.render()\n        source = resp.html.html\n        soup = BeautifulSoup(source, 'lxml')\n        compName = soup.find(id=\"bylineInfo\").text\n        print(compName)\n    return compName\n\n\ndef corporate_critic(companyName):\n    br = mechanize.Browser()\n    br.open(corporate_critic_url)\n    br.select_form('Form1')\n    br['txtSearch'] = companyName\n    br.submit()\n    try:\n        soup = BeautifulSoup(br.response().read(), 'html.parser')\n        ethicsScore = soup.select_one(\".resultlistethiscore\").text\n        ethicsScore = re.sub(' ', '', ethicsScore)\n        ethicsScore = re.sub(chr(13), '', ethicsScore)\n        ethicsScore = re.sub(chr(10), '', ethicsScore)\n        ethicsScore = re.sub('\\)', '', ethicsScore)\n        ethicsScore = re.sub('\\(', '', ethicsScore)\n        print(ethicsScore)\n    except:\n        ethicsScore = -1\n\n    return ethicsScore\nfilename = 'Extension/passData.csv'\n\nwhile True:\n    time.sleep(2)\n    try:\n        df = csv.reader(filename)\n        product_url = ''\n        for entry in df:\n            product_url+=entry\n        final_ethics_score = corporate_critic(find_company(product_url))\n\n        f = open(filename, \"w+\")\n        f.close()\n    except:\n        print(\"lol\")\n\n\n\n\n#final_ethics_score = corporate_critic(find_company(product_url))\n#print(final_ethics_score\n"]}